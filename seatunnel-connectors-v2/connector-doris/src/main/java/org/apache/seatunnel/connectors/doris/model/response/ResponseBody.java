/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.seatunnel.connectors.doris.model.response;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Created 2022/8/24
 *
 */
@AllArgsConstructor
@NoArgsConstructor
@Data
public class ResponseBody {

    private static final long serialVersionUID = 1L;

    /**
     * Imported transaction ID. The user may not perceive it.
     */
    @JsonProperty("TxnId")
    private int txnId;
    /**
     * Import Label. Specified by the user or automatically generated by the system.
     */
    @JsonProperty("Label")
    private String label;

    @JsonProperty("TwoPhaseCommit")
    private String twoPhaseCommit;
    /**
     * Import complete status.
     * "Success": Indicates that the import was successful.
     * "Publish Timeout": This status also indicates that the import has been completed, but the data may be visible with a delay, and there is no need to retry.
     * "Label Already Exists": The Label is duplicated, and the Label needs to be replaced.
     */
    @JsonProperty("Status")
    private String status;
    /**
     * The status of the import job corresponding to the existing Label.
     * This field will only be displayed when the Status is "Label Already Exists".
     * The user can know the status of the import job corresponding to the existing Label through this status.
     * "RUNNING" means that the job is still executing, and "FINISHED" means that the job is successful.
     */
    @JsonProperty("ExistingJobStatus")
    private String existingJobStatus;
    /**
     * Import error information
     */
    @JsonProperty("Message")
    private String message;
    /**
     * Import the total number of processed rows
     */
    @JsonProperty("NumberTotalRows")
    private long numberTotalRows;
    /**
     * The number of rows successfully imported.
     */
    @JsonProperty("NumberLoadedRows")
    private long numberLoadedRows;
    /**
     * Number of rows with unqualified data quality
     */
    @JsonProperty("NumberFilteredRows")
    private int numberFilteredRows;
    /**
     * The number of rows filtered by the where condition
     */
    @JsonProperty("NumberUnselectedRows")
    private int numberUnselectedRows;
    /**
     * Number of bytes imported
     */
    @JsonProperty("LoadBytes")
    private long loadBytes;
    /**
     * Import completion time. The unit is milliseconds.
     */
    @JsonProperty("LoadTimeMs")
    private int loadTimeMs;
    /**
     * The time it takes to request Fe to start a transaction, in milliseconds
     */
    @JsonProperty("BeginTxnTimeMs")
    private int beginTxnTimeMs;
    /**
     * The time it takes to request Fe to obtain the import data execution plan, in milliseconds
     */
    @JsonProperty("StreamLoadPutTimeMs")
    private int streamLoadPutTimeMs;
    /**
     * The time spent reading data, in milliseconds
     */
    @JsonProperty("ReadDataTimeMs")
    private int readDataTimeMs;
    /**
     * Time to perform a data write operation takes milliseconds
     */
    @JsonProperty("WriteDataTimeMs")
    private int writeDataTimeMs;
    /**
     * The time taken to submit and publish the transaction request to Fe, in milliseconds
     */
    @JsonProperty("CommitAndPublishTimeMs")
    private int commitAndPublishTimeMs;
    /**
     * If there is a data quality problem, check the specific error line by visiting this URL
     */
    @JsonProperty("ErrorURL")
    private String errorURL;
}
